using HidSharp;

namespace KeyRGB.SimpleTest;

internal class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("=== KeyRGB Jednoduch√Ω Test ===");
        Console.WriteLine();
        
        Console.WriteLine("Hled√°m v≈°echna HID za≈ô√≠zen√≠...");
        var allDevices = DeviceList.Local.GetHidDevices();
        Console.WriteLine($"Nalezeno {allDevices.Count()} HID za≈ô√≠zen√≠");
        Console.WriteLine();
        
        Console.WriteLine("HID za≈ô√≠zen√≠:");
        foreach (var device in allDevices)
        {
            try
            {
                Console.WriteLine($"VID: 0x{device.VendorID:X4}, PID: 0x{device.ProductID:X4} - {device.GetProductName() ?? "Unknown"}");
            }
            catch
            {
                Console.WriteLine($"VID: 0x{device.VendorID:X4}, PID: 0x{device.ProductID:X4} - Chyba p≈ôi ƒçten√≠ n√°zvu");
            }
        }
        
        Console.WriteLine();
        Console.WriteLine("Hled√°m SONiX kl√°vesnici (VID: 0x0C45, PID: 0x8508)...");
        
        var sonixDevices = DeviceList.Local.GetHidDevices(0x0c45, 0x8508);
        
        if (sonixDevices.Any())
        {
            Console.WriteLine($"‚úÖ Nalezeno {sonixDevices.Count()} SONiX za≈ô√≠zen√≠!");
            
            foreach (var device in sonixDevices)
            {
                try
                {
                    Console.WriteLine($"Za≈ô√≠zen√≠: {device.GetProductName()}");
                    Console.WriteLine($"Cesta: {device.DevicePath}");
                    
                    Console.WriteLine("Zkou≈°√≠m otev≈ô√≠t za≈ô√≠zen√≠...");
                    using var stream = device.Open();
                    Console.WriteLine("‚úÖ √öspƒõ≈°nƒõ otev≈ôeno!");
                    
                    Console.WriteLine("‚úÖ Kl√°vesnice je p≈ôipravena k pou≈æit√≠!");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå Chyba p≈ôi otev√≠r√°n√≠: {ex.Message}");
                    Console.WriteLine("üí° Zkuste spustit jako administr√°tor");
                }
            }
        }
        else
        {
            Console.WriteLine("‚ùå SONiX kl√°vesnice nebyla nalezena!");
            Console.WriteLine();
            Console.WriteLine("Mo≈æn√© p≈ô√≠ƒçiny:");
            Console.WriteLine("1. Kl√°vesnice nen√≠ p≈ôipojena");
            Console.WriteLine("2. Jin√© VID/PID - zkontrolujte Device Manager");
            Console.WriteLine("3. Pot≈ôebujete spustit jako administr√°tor");
            Console.WriteLine();
            
            Console.WriteLine("V≈°echna nalezen√° za≈ô√≠zen√≠ s podobn√Ωm VID:");
            var similarDevices = allDevices.Where(d => d.VendorID == 0x0c45);
            foreach (var device in similarDevices)
            {
                try
                {
                    Console.WriteLine($"  VID: 0x{device.VendorID:X4}, PID: 0x{device.ProductID:X4} - {device.GetProductName() ?? "Unknown"}");
                }
                catch
                {
                    Console.WriteLine($"  VID: 0x{device.VendorID:X4}, PID: 0x{device.ProductID:X4} - Chyba p≈ôi ƒçten√≠");
                }
            }
        }
        
        Console.WriteLine();
        Console.WriteLine("Stisknƒõte Enter pro ukonƒçen√≠...");
        Console.ReadLine();
    }
}